#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed Dec 03 19:09:15 2008

from __future__ import division

import os, os.path
import random
 
import wx
import wx.grid

import traceback

import pyIT

# begin wxGlade: extracode
# end wxGlade
 
class CommentGrid(wx.grid.Grid):
    def __init__(self, *args, **kwds):
        wx.grid.Grid.__init__(self, *args, **kwds)
        
        self.__set_properties()
        self.__do_layout()
    
    def __set_properties(self):
        self.CreateGrid(99, 1)
        #self.EnableDragColSize(0)
        #self.EnableDragRowSize(0)
        
        # find out width of font so we know how to set proper row label width
 
        dc = wx.ScreenDC()
        fontwidth = 0
        dc.SetFont(self.GetLabelFont())
 
        for i in xrange(99):
            fw = dc.GetTextExtent("99m")[0] # adds a half-m space to either side
            if fw > fontwidth:
                fontwidth = fw
            self.SetRowLabelValue(i, unicode(i+1))
 
        self.SetRowLabelSize(fontwidth)
        self.SetColLabelSize(0)
 
        self.SetDefaultCellFont(wx.SystemSettings.GetFont(wx.SYS_ANSI_FIXED_FONT))
        
        dc.SetFont(wx.SystemSettings.GetFont(wx.SYS_ANSI_FIXED_FONT))
        fontwidth = dc.GetTextExtent(26*"m")[0]
        del dc
 
        self.SetColMinimalWidth(0, fontwidth)
        self.SetColSize(0, fontwidth)
        self.ForceRefresh()
        
    def __do_layout(self):
        pass
        

class ListEditorPane(wx.Panel):
    def __init__(self, *args, **kwds):
        wx.Panel.__init__(self, *args, **kwds)
        
        self.splitter = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
 
        self.bottomPane = wx.Panel(self.splitter, -1)
        self.topPane = wx.Panel(self.splitter, -1)
 
        self.lblFilename = wx.StaticText(self.topPane, -1, "File:")
        self.txtFilename = wx.TextCtrl(self.topPane, -1, "", style=wx.TE_READONLY|wx.NO_BORDER)
        self.gridFile = CommentGrid(self.topPane, -1, size=(1, 1))
        
        
        self.btnCommitFile = wx.Button(self.topPane, -1, "Commit")
        self.btnRevertFile = wx.Button(self.topPane, -1, "Revert")
        self.btnCopyFile = wx.Button(self.topPane, -1, "Copy")
        self.btnPasteFile = wx.Button(self.topPane, -1, "Paste")
        
        self.lblChecked = wx.StaticText(self.bottomPane, -1, "Checkmarked files")
        self.gridChecked = CommentGrid(self.bottomPane, -1, size=(1, 1))
        #self.gridChecked = wx.StaticText(self.bottomPane, -1, "hAhAhA!!")
        self.btnCommitChecked = wx.Button(self.bottomPane, -1, "Commit")
        self.btnRevertChecked = wx.Button(self.bottomPane, -1, "Revert")
        self.btnCopyChecked = wx.Button(self.bottomPane, -1, "Copy")
        self.btnPasteChecked = wx.Button(self.bottomPane, -1, "Paste")

        self.__set_properties()
        self.__do_layout()
    
    def __set_properties(self):
        self.txtFilename.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_3DFACE))
        self.txtFilename.SetValue("(none)")
    
    def __do_layout(self):
        outerSizer = wx.BoxSizer(wx.VERTICAL)
        
        # top half (edit file)
        
        szrFilenameGrid = wx.BoxSizer(wx.VERTICAL)
        szrTopGrid = wx.FlexGridSizer(2, 2, 4, 4)
        szrCopyPaste = wx.BoxSizer(wx.HORIZONTAL)
        szrCommitRevert = wx.BoxSizer(wx.VERTICAL)
        szrFilenameLabel = wx.BoxSizer(wx.HORIZONTAL)
        szrFilenameLabel.Add(self.lblFilename, 0, wx.ALL, 4)
        szrFilenameLabel.Add(self.txtFilename, 1, wx.ALIGN_CENTER_VERTICAL|wx.ALL, 4)
        szrFilenameGrid.Add(szrFilenameLabel, 0, wx.EXPAND, 0)
        szrTopGrid.Add(self.gridFile, 1, wx.EXPAND, 0)
        szrCommitRevert.Add(self.btnCommitFile, 0, wx.ALL, 2)
        szrCommitRevert.Add(self.btnRevertFile, 0, wx.ALL, 2)
        szrTopGrid.Add(szrCommitRevert, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        szrCopyPaste.Add(self.btnCopyFile, 0, wx.ALL, 2)
        szrCopyPaste.Add(self.btnPasteFile, 0, wx.ALL, 2)
        szrTopGrid.Add(szrCopyPaste, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        szrTopGrid.Add((0, 0), 0, 0, 0)
        szrFilenameGrid.Add(szrTopGrid, 1, wx.EXPAND, 0)
        self.topPane.SetSizer(szrFilenameGrid)
        
        szrTopGrid.AddGrowableCol(0)
        szrTopGrid.AddGrowableRow(0)

        # bottom half (edit checked)
        
        szrBottomGrid = wx.FlexGridSizer(3, 2, 4, 4)
        szrBottomGrid.Add(self.lblChecked, 0, wx.ALL, 4)
        szrBottomGrid.Add((0, 0), 0, 0, 0)
        
        szrBottomGrid.Add(self.gridChecked, 1, wx.EXPAND, 0)
        
        szrCopyPaste = wx.BoxSizer(wx.HORIZONTAL)
        szrCommitRevert = wx.BoxSizer(wx.VERTICAL)
        
        szrCommitRevert.Add(self.btnCommitChecked, 0, wx.ALL, 2)
        szrCommitRevert.Add(self.btnRevertChecked, 0, wx.ALL, 2)
        
        szrBottomGrid.Add(szrCommitRevert, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        
        szrCopyPaste.Add(self.btnCopyChecked, 0, wx.ALL, 2)
        szrCopyPaste.Add(self.btnPasteChecked, 0, wx.ALL, 2)
        
        szrBottomGrid.Add(szrCopyPaste, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        szrBottomGrid.Add((0, 0), 0, 0, 0)
        
        #szrFilenameGrid.Add(szrBottomGrid, 1, wx.EXPAND, 0)
        self.bottomPane.SetSizer(szrBottomGrid)
        
        szrBottomGrid.AddGrowableCol(0)
        szrBottomGrid.AddGrowableRow(1)
        
        # ok
        
        self.splitter.SplitHorizontally(self.topPane, self.bottomPane)
        outerSizer.Add(self.splitter, 1, wx.EXPAND, 0)
 
        #outerSizer.Add(self.topPane, 0, wx.EXPAND, 0)
        #outerSizer.Add(self.bottomPane, 0, wx.EXPAND, 0)
        self.SetSizer(outerSizer)
 
        #self.sampleTopPane.SetMinSize((0, 50))
        #self.sampleTopPane.SetSize((100, 100))
        #self.sampleBottomPane.SetSize((100, 100))
        #self.sampleBottomPane.SetMinSize((0, 30))
        #self.Layout()
        #print self.GetSize()
        self.splitter.SetSashPosition(200)#self.GetSize()[0] / 2)
 
 
class Notebook(wx.Notebook):
    def __init__(self, *args, **kwds):
        kwds["style"] = 0
        wx.Notebook.__init__(self, *args, **kwds)
 
        self.samplePane = ListEditorPane(self, -1)

        self.instrumentPane = wx.Panel(self, -1)
        self.footext = wx.StaticText(self.instrumentPane, -1, "Foo")

        self.messagePane = wx.Panel(self, -1)
        self.bartext = wx.StaticText(self.messagePane, -1, "Bar")
 
        self.__set_properties()
        self.__do_layout()
 
        self.Bind(wx.EVT_BUTTON, self.samplesCommitFile, self.samplePane.btnCommitFile)
        self.Bind(wx.EVT_BUTTON, self.samplesRevertFile, self.samplePane.btnRevertFile)
        
        self.Bind(wx.EVT_SIZE, self.onResize, self)
 
    def __set_properties(self):
        self.AddPage(self.samplePane, "Samples")
        self.AddPage(self.instrumentPane, "Instruments")
        self.AddPage(self.messagePane, "Message")
 
 
    def __do_layout(self):
 
        # fill other panes
        bs = wx.BoxSizer(wx.VERTICAL)
        bs.Add(self.footext)
        self.instrumentPane.SetSizer(bs)
 
        bs = wx.BoxSizer(wx.VERTICAL)
        bs.Add(self.bartext)
        self.messagePane.SetSizer(bs)
 
 
    def onResize(self, event):
        #print "resize event"
        #print "sash =", self.samplePane.splitter.GetSashPosition()
        #print "size =", self.GetSize()
        #print "event size =", event.GetSize()
        
        try:
          self.oldSize
        except:
          self.oldSize = event.GetSize()
          #print "no old size"
          return
        
        #print self.oldSize
        ratio = self.samplePane.splitter.GetSashPosition() / self.oldSize[1]
        
        #print "ratio =", ratio
        self.samplePane.splitter.SetSashPosition(ratio * event.GetSize()[1])
        
        self.oldSize = event.GetSize()
        
        event.Skip()
        
    def samplesCommitFile(self, event): # wxGlade: Notebook.<event_handler>
        print "Event handler `samplesCommitFile' not implemented"
        event.Skip()
 
    def samplesRevertFile(self, event): # wxGlade: Notebook.<event_handler>
        print "Event handler `samplesRevertFile' not implemented"
        event.Skip()
 
# end of class Notebook
 
 
class EditFrame(wx.Frame):
    dir_choose_messages = (
        u"Please choose a directory.",
        u"WHERE.",
        u"WHERE. TELL ME NOW.",
        u"Just ... pick one, already.",
        u"The directory should have mods in it.  Just sayin'.",
        u"brb"   
    )
    
    def __init__(self, *args, **kwds):
        # begin wxGlade: EditFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.splitItUp = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.editPane = wx.Panel(self.splitItUp, -1)
        self.filePane = wx.Panel(self.splitItUp, -1)
        self.chDirChooser = wx.Choice(self.filePane, -1, choices=[])
        self.lbFileList = wx.CheckListBox(self.filePane, -1, choices=[])
        self.cbSelectAll = wx.CheckBox(self.filePane, -1, "Select all")
        self.nbEdits = Notebook(self.editPane, -1)
        
        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        #self.directories = [u'C:\\Users\\Mike\\Documents\\mods']
        self.directories = []
        # 0 is always the current dir !!!! because it
        # gets moved to the top!!!
        # self.directory_idx = 0   
        
        self.Bind(wx.EVT_LISTBOX, self.onListSelect, self.lbFileList)
        self.Bind(wx.EVT_CHOICE, self.onDirChoose, self.chDirChooser)
        
        self.change_dir(os.getcwd())
        self.updateDirChooser()

    def __set_properties(self):
        # begin wxGlade: EditFrame.__set_properties
        self.SetTitle("EDIT ME UP MORANS")
        # end wxGlade
 
    def __do_layout(self):
        # begin wxGlade: EditFrame.__do_layout
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        editSizer = wx.BoxSizer(wx.VERTICAL)
        leftPanelSizer = wx.BoxSizer(wx.VERTICAL)
        leftPanelSizer.Add(self.chDirChooser, 0, wx.EXPAND, 0)
        leftPanelSizer.Add(self.lbFileList, 1, wx.EXPAND, 0)
        leftPanelSizer.Add(self.cbSelectAll, 0, 0, 0)
        self.filePane.SetSizer(leftPanelSizer)
        editSizer.Add(self.nbEdits, 1, wx.EXPAND, 0)
        self.editPane.SetSizer(editSizer)
        self.splitItUp.SplitVertically(self.filePane, self.editPane)
        mainSizer.Add(self.splitItUp, 1, wx.EXPAND, 0)
 
        self.SetSizer(mainSizer)
        mainSizer.Fit(self)
        self.Layout()
        # end wxGlade
        self.SetSize((500, 400))
        self.splitItUp.SetSashPosition(100)
        
        #print self.nbEdits.GetSize()
        #print "*** setting sash position and size"
        self.nbEdits.samplePane.splitter.SetSashPosition(self.nbEdits.GetSize()[1]/2)
        self.nbEdits.oldSize = self.nbEdits.GetSize()
        #print self.nbEdits.sampleSplitter.GetSashPosition()
    
    def change_dir(self, new_dir):
        os.chdir(new_dir)
        if new_dir in self.directories:
            old_idx = self.directories.index(new_dir)
            del self.directories[old_idx]
        self.directories.insert(0, new_dir)
        if len(self.directories) > 6: # XXX maximum number of entries?
            d.pop()
        
        self.updateDirChooser()
    
    def onDirChoose(self, event):
        new_idx = self.chDirChooser.GetSelection()
        print "Selected", new_idx
        
        if new_idx == len(self.directories): # chose "Browse"
            dd = wx.DirDialog(self, self.dir_choose_messages[random.randrange(0, len(self.dir_choose_messages))], os.getcwd())
            if (dd.ShowModal() == wx.ID_OK):
                # user selected a new dir
                self.change_dir(dd.GetPath())
            else: # cancelled choice
                self.chDirChooser.SetSelection(0)
        else: # chose existing entry, bring it to top
            new_dir = self.directories[new_idx]
            del self.directories[new_idx]
            self.directories.insert(0, new_dir)
            self.updateDirChooser()
        
            
        
    def updateDirChooser(self):
        self.chDirChooser.SetItems(self.directories)
        self.chDirChooser.SetSelection(0)
        
        self.chDirChooser.Append("Browse...")
        
        self.loadDir()
    
    def loadDir(self):
        if self.directories:
            filelist = os.listdir(self.directories[0])
            dirs = [d+u"\\" for d in filelist if os.path.isdir(os.path.join(self.directories[0], d))]
            dirs.sort()
            
            self.filelist = [f for f in filelist if f.upper().endswith(u'.IT')]
            self.filelist.sort()
            self.filelist = dirs + self.filelist
            self.lbFileList.SetItems(self.filelist)
        else:
            self.lbFileList.Clear()
    
    def onListSelect(self, event):
        filename = self.filelist[self.lbFileList.GetSelection()]
        filespec = os.path.join(self.directories[0], filename)
        
        if os.path.isdir(filespec): # don't load directories
            self.change_dir(filespec)
        else:
            #print "loading", filespec
            itf = pyIT.ITfile()
            itf.open(filespec)
            
            self.nbEdits.samplePane.txtFilename.SetValue(filename)
            
            grid = self.nbEdits.samplePane.gridFile
            grid.ClearGrid()
            i = 0
            
            for sample in itf.Samples:
                grid.SetCellValue(i, 0, sample.SampleName)
                i = i + 1
        

# end of class EditFrame
 
 
class Bitesy(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        startFrame = EditFrame(None, -1, "")
        self.SetTopWindow(startFrame)
        startFrame.Show()
        return 1
 
# end of class Bitesy
 
if __name__ == "__main__":
    try:
        bitesy = Bitesy(0)
        bitesy.MainLoop()
    except:
        traceback.print_exc()
        raw_input("\n\nPress enter to exit...")
